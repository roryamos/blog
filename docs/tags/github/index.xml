<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitHub on Rory Blog</title>
    <link>https://twrory.com/tags/github/</link>
    <description>Recent content in GitHub on Rory Blog</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 27 Dec 2018 22:09:02 +0800</lastBuildDate>
    <atom:link href="https://twrory.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基於 Docker Compose 的 Discuz X3.4</title>
      <link>https://twrory.com/2018/12/27/docker-compose-with-discuz/</link>
      <pubDate>Thu, 27 Dec 2018 22:09:02 +0800</pubDate>
      <guid>https://twrory.com/2018/12/27/docker-compose-with-discuz/</guid>
      <description>&lt;h3 id=&#34;discuz&#34;&gt;Discuz&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Discuz!是個可免費下載的PHP網路論壇程式，簡稱DZ，由戴志康（Crossday）所創立，目前最新版本是Discuz! X3.4。[2]前身為Crossday Bulletin（CDB），最初改自XMBForum，爾後改寫成為現今的Discuz!社群論壇程式，由康盛創想所有（現已被騰訊收購）。現在Discuz!已成為大中華地區最多用戶使用的論壇程式。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;我們直接使用先前介紹 &lt;a href=&#34;https://twrory.com/2018/12/19/docker-compose-with-php-laravel-dev/&#34;&gt;架構一個基於Docker Compose 的 PHP Laravel 開發環境&lt;/a&gt; 的整個環境&lt;br&gt;&#xA;準備好 docker 及 docker compose 的環境後我們就可以開始建置 Discuz 了&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/roryamos/LaravelDev.git Discuz&#xA;cd Discuz&#xA;tree&#xA;.&#xA;├── composer.sh&#xA;├── docker-compose.yml&#xA;├── html&#xA;│   ├── index.html&#xA;│   ├── index.php&#xA;│   └── phpinfo.php&#xA;├── log&#xA;│   ├── nginx&#xA;│   └── php&#xA;├── mariadb&#xA;│   ├── my.cnf&#xA;│   └── run.sh&#xA;├── nginx&#xA;│   ├── default.conf&#xA;├── phpfpm&#xA;│   ├── php.ini&#xA;│   └── www.conf&#xA;├── README.md&#xA;├── restart.sh&#xA;└── var-lib-mysql&#xA;&#xA;8 directories, 12 files&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;1-clone-discuz-最新的代碼&#34;&gt;1. clone Discuz 最新的代碼&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://gitee.com/ComsenzDiscuz/DiscuzX.git html/discuz&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2-修改-nginx-的路徑配置&#34;&gt;2. 修改 Nginx 的路徑配置&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vi nginx/default.conf&#xA;--------------------------------&#xA;    root /var/www/html/discuz/upload;&#xA;    location / {&#xA;        root   /var/www/html/discuz/upload;&#xA;        index  index.html index.htm index.php;&#xA;    }&#xA;--------------------------------&#xA;./restart.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打開網址瀏覽 http://youripaddress/, 調整安裝嚮導所提示的檔案權限.&lt;br&gt;&#xA;緊接著你會看到一個問題mysqli_connect() advice_mysqli_connect&lt;br&gt;&#xA;&lt;img src=&#34;https://twrory.com/images/discuz/php-mysqli-connect-error.png&#34; alt=&#34;Image of winrun&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>架構一個基於Docker Compose 的 PHP Laravel 開發環境</title>
      <link>https://twrory.com/2018/12/19/docker-compose-with-php-laravel-dev/</link>
      <pubDate>Wed, 19 Dec 2018 14:19:38 +0800</pubDate>
      <guid>https://twrory.com/2018/12/19/docker-compose-with-php-laravel-dev/</guid>
      <description>&lt;h3 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;操作過 Docker 指令的同學們，應該都嘗試過用指令的方式管理 Docker 容器, 當需要運行的容器愈來愈多時管理的指令是又多又複雜。&#xA;Docker Compose 是一個定義多個 Docker 容器的工具，讓我們可以使用 YAML 格式的配置文件管理多個容器，&#xA;並幫助我們快速的佈建一套系統，提供了單一的命令，我們可以一次性的運行或停止相互依賴的容器。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;安裝-docker&#34;&gt;安裝 Docker&lt;/h4&gt;&#xA;&lt;p&gt;基本的安裝可以參考 &lt;a href=&#34;https://twrory.com/2018/12/12/docker-install/&#34;&gt;Docker 安裝筆記 - 以LNMP為例的應用&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;安裝-docker-compose&#34;&gt;安裝 Docker Compose&lt;/h4&gt;&#xA;&lt;p&gt;在安裝好Docker 之後、我們可以開始安裝 Docker Compose, 首先我們需要先安裝 python-pip&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo yum install -y epel-release&#xA;sudo yum install -y python-pip&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下來就可以安裝Docker Compose了&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要的話將 Python 相關的套件更新一下讓 Docker Compose 能夠順利運行&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum upgrade python*&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;php-laravel&#34;&gt;PHP Laravel&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Laravel 是一個網頁應用框架實現了MVC的架構，運用了 Composer 這個套件相依性管理系統，提供連接許多種類的RDBMS的方式，&#xA;提供開發語法糖使開發常見痛點的實現變的簡單，像是權限管理、路由、Sessions、及快取機制。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;接下來我們試著以安裝 Laravel 的開發環境為例，進行 Docker Compose 的配置&lt;/p&gt;&#xA;&lt;h4 id=&#34;1-初始化我們的目錄結構&#34;&gt;1. 初始化我們的目錄結構&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p html log/nginx log/php mariadb nginx phpfpm var-lib-mysql&#xA;docker pull mariadb/server:10.3&#xA;docker run --name mariadb -e MYSQL_ROOT_PASSWORD=passwd -d mariadb/server:10.3&#xA;docker cp mariadb:/etc/mysql/my.cnf ./mariadb/my.cnf&#xA;docker stop mariadb&#xA;docker rm mariadb&#xA;&#xA;docker pull nginx:1.15&#xA;docker run --name nginx -v /data/html:/usr/share/nginx/html:ro -p 80:80 -d nginx:1.15&#xA;docker cp nginx:/etc/nginx/conf.d/default.conf ./nginx/default.conf&#xA;docker stop nginx&#xA;docker rm nginx&#xA;&#xA;docker pull php:7.3-fpm&#xA;docker run --name php-fpm -p 9000:9000 -d php:7.3-fpm&#xA;docker cp php-fpm:/usr/local/etc/php-fpm.d/www.conf ./phpfpm/www.conf&#xA;docker cp php-fpm:/usr/local/etc/php/php.ini-production ./phpfpm/php.ini&#xA;docker stop php-fpm&#xA;docker rm php-fpm&#xA;tree .&#xA;.&#xA;├── docker-compose.yml&#xA;├── html&#xA;│   └── phpinfo.php&#xA;├── log&#xA;│   ├── nginx&#xA;│   └── php&#xA;├── mariadb&#xA;│   └── my.cnf&#xA;├── nginx&#xA;│   └── default.conf&#xA;├── phpfpm&#xA;│   ├── php.ini&#xA;│   └── www.conf&#xA;└── var-lib-mysql&#xA;&#xA;8 directories, 6 files&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2-配置docker-composeyml&#34;&gt;2. 配置docker-compose.yml&lt;/h4&gt;&#xA;&lt;p&gt;主要是運行 Mariadb, nginx, php-fpm 這三個容器&lt;/p&gt;</description>
    </item>
    <item>
      <title>Https Github Pages With Hugo</title>
      <link>https://twrory.com/2018/12/14/https-github-page-with-hugo/</link>
      <pubDate>Fri, 14 Dec 2018 21:23:48 +0800</pubDate>
      <guid>https://twrory.com/2018/12/14/https-github-page-with-hugo/</guid>
      <description>&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Hugo 是基於 Go 語言的靜態網站生成器&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;github-pages&#34;&gt;GitHub Pages&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;GitHub Pages是 GitHub 提供的一種網站託管服務，用於託管GitHub用戶，用戶博客，項目文檔, 甚至整本書的靜態網頁。&lt;br&gt;&#xA;GitHub Pages於2008年底推出。與 GitHub 的其他部分一樣，它包括免費和付費的服務層。通過此服務生成的網站作為github.io的子域名託管，或作為通過第三方域名註冊商購買的自定義域名託管。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;安裝-hugo&#34;&gt;安裝 Hugo&lt;/h3&gt;&#xA;&lt;p&gt;Mac 下直接使用 homebrew&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew install hugo&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Windows 或其他作業系統 &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;https://github.com/gohugoio/hugo/releases&lt;/a&gt; 到官方發佈頁下載.&lt;br&gt;&#xA;解壓縮後將檔案 copy 到環境變數 path 裡, 以Windows 為例就是在 C:\Windows\System32. 然後到命令列下執行 :&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo version&#xA;Hugo Static Site Generator v0.52 windows/amd64 BuildDate: 2018-11-28T14:07:10Z&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;生成站點&#34;&gt;生成站點&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo new site test&#xA;$ tree test&#xA;D:\DOCUMENTS\TEST&#xA;├─archetypes //放一些template的地方, 可以客制化自已的 md template&#xA;├─content //文章的md檔&#xA;├─data //存放配置檔, 在生成網頁時參考&#xA;├─layouts //存放生成html時所用的template&#xA;├─static //存放靜態文件，在生成網頁時會一併複制過去&#xA;└─themes //存放主題, 可以挑選喜歡的主題使用&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;創建文章&#34;&gt;創建文章&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new post/hello-world.md&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;編輯 content/post/hello-world.md&lt;/p&gt;</description>
    </item>
    <item>
      <title>關於我</title>
      <link>https://twrory.com/about/</link>
      <pubDate>Mon, 02 Jan 2006 15:04:05 +0700</pubDate>
      <guid>https://twrory.com/about/</guid>
      <description>&lt;h3 id=&#34;rory&#34;&gt;Rory&lt;/h3&gt;&#xA;&lt;p&gt;從事程式設計工作近二十年, 陸續學習過PHP, .Net, Java, NodeJs, Go. 從 Web 到移動端再到目前專注的服務器端.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Follow @roryamos&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;如果覺得有什麼項目不錯的，歡迎給星.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
