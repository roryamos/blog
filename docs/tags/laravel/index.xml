<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laravel on Rory Blog</title>
    <link>https://twrory.com/tags/laravel/</link>
    <description>Recent content in Laravel on Rory Blog</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 19 Dec 2018 14:19:38 +0800</lastBuildDate>
    <atom:link href="https://twrory.com/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>架構一個基於Docker Compose 的 PHP Laravel 開發環境</title>
      <link>https://twrory.com/2018/12/19/docker-compose-with-php-laravel-dev/</link>
      <pubDate>Wed, 19 Dec 2018 14:19:38 +0800</pubDate>
      <guid>https://twrory.com/2018/12/19/docker-compose-with-php-laravel-dev/</guid>
      <description>&lt;h3 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;操作過 Docker 指令的同學們，應該都嘗試過用指令的方式管理 Docker 容器, 當需要運行的容器愈來愈多時管理的指令是又多又複雜。&#xA;Docker Compose 是一個定義多個 Docker 容器的工具，讓我們可以使用 YAML 格式的配置文件管理多個容器，&#xA;並幫助我們快速的佈建一套系統，提供了單一的命令，我們可以一次性的運行或停止相互依賴的容器。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;安裝-docker&#34;&gt;安裝 Docker&lt;/h4&gt;&#xA;&lt;p&gt;基本的安裝可以參考 &lt;a href=&#34;https://twrory.com/2018/12/12/docker-install/&#34;&gt;Docker 安裝筆記 - 以LNMP為例的應用&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;安裝-docker-compose&#34;&gt;安裝 Docker Compose&lt;/h4&gt;&#xA;&lt;p&gt;在安裝好Docker 之後、我們可以開始安裝 Docker Compose, 首先我們需要先安裝 python-pip&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo yum install -y epel-release&#xA;sudo yum install -y python-pip&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下來就可以安裝Docker Compose了&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要的話將 Python 相關的套件更新一下讓 Docker Compose 能夠順利運行&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum upgrade python*&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;php-laravel&#34;&gt;PHP Laravel&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Laravel 是一個網頁應用框架實現了MVC的架構，運用了 Composer 這個套件相依性管理系統，提供連接許多種類的RDBMS的方式，&#xA;提供開發語法糖使開發常見痛點的實現變的簡單，像是權限管理、路由、Sessions、及快取機制。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;接下來我們試著以安裝 Laravel 的開發環境為例，進行 Docker Compose 的配置&lt;/p&gt;&#xA;&lt;h4 id=&#34;1-初始化我們的目錄結構&#34;&gt;1. 初始化我們的目錄結構&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p html log/nginx log/php mariadb nginx phpfpm var-lib-mysql&#xA;docker pull mariadb/server:10.3&#xA;docker run --name mariadb -e MYSQL_ROOT_PASSWORD=passwd -d mariadb/server:10.3&#xA;docker cp mariadb:/etc/mysql/my.cnf ./mariadb/my.cnf&#xA;docker stop mariadb&#xA;docker rm mariadb&#xA;&#xA;docker pull nginx:1.15&#xA;docker run --name nginx -v /data/html:/usr/share/nginx/html:ro -p 80:80 -d nginx:1.15&#xA;docker cp nginx:/etc/nginx/conf.d/default.conf ./nginx/default.conf&#xA;docker stop nginx&#xA;docker rm nginx&#xA;&#xA;docker pull php:7.3-fpm&#xA;docker run --name php-fpm -p 9000:9000 -d php:7.3-fpm&#xA;docker cp php-fpm:/usr/local/etc/php-fpm.d/www.conf ./phpfpm/www.conf&#xA;docker cp php-fpm:/usr/local/etc/php/php.ini-production ./phpfpm/php.ini&#xA;docker stop php-fpm&#xA;docker rm php-fpm&#xA;tree .&#xA;.&#xA;├── docker-compose.yml&#xA;├── html&#xA;│   └── phpinfo.php&#xA;├── log&#xA;│   ├── nginx&#xA;│   └── php&#xA;├── mariadb&#xA;│   └── my.cnf&#xA;├── nginx&#xA;│   └── default.conf&#xA;├── phpfpm&#xA;│   ├── php.ini&#xA;│   └── www.conf&#xA;└── var-lib-mysql&#xA;&#xA;8 directories, 6 files&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2-配置docker-composeyml&#34;&gt;2. 配置docker-compose.yml&lt;/h4&gt;&#xA;&lt;p&gt;主要是運行 Mariadb, nginx, php-fpm 這三個容器&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
